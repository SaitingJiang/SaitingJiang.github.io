{"title":"java进阶-学习笔记(一)","slug":"java进阶-学习笔记(一)","date":"2022-06-01T01:25:00.000Z","updated":"2022-06-01T03:19:10.393Z","comments":true,"path":"api/articles/java进阶-学习笔记(一).json","excerpt":null,"covers":["/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/1.png","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/3.png"],"content":"<p>  <strong>集合框架和泛型</strong>  </p>\n<p>如果并不知道程序运行时会需要多少对象，或者需要更复杂方式存储对象——可以使用Java集合框架</p>\n<p>Java集合框架提供了一套性能优良、使用方便的接口和类，它们位于java.util包中</p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/1.png\" alt=\"1\"></p>\n<p>Collection 接口存储一组不唯一，无序的对象</p>\n<p>List 接口存储一组不唯一，有序（插入顺序）的对象</p>\n<p>Set 接口存储一组唯一，无序的对象 </p>\n<p>Map接口存储一组键值对象，提供key到 value    的映射  </p>\n<p>ArrayList实现了长度可变的数组，在内存中分配连续的空间，遍历元素和随机访问元素的效率比较高</p>\n<p>LinkedList采用链表存储方式，插入、删除元素时效率比较高  </p>\n<p>  <strong>ArrayList特点</strong>  </p>\n<p>ArrayList类是List接口的一个具体实现类</p>\n<p>ArrayList对象实现了可变大小的数组</p>\n<p>随机访问和遍历元素时，它提供更好的性能</p>\n<p>ArrayList集合中可以添加任何类型的数据，并且添加的数据都将转换成Object类型。</p>\n<p>  <strong>ArrayList常用方法</strong>  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   在列表的末尾顺序添加元素，起始索引位置从<span class=\"token number\">0</span>开始\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   在指定的索引位置添加元素。索引位置必须介于<span class=\"token number\">0</span>和列表中元素个数之间\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回列表中的元素个数\n<span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>  返回指定索引位置处的元素。取出的元素是<span class=\"token class-name\">Object</span>类型，使用前需要进行强制类型转换\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  判断列表中是否存在指定元素\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  从列表中删除元素\n<span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> 从列表中删除指定位置元素，起始索引位置从<span class=\"token number\">0</span>开始\n\n<span class=\"token class-name\">Collection</span>接口常用通用方法还有：<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>LinkedList常用方法</strong>  </p>\n<p>除了具有ArrayList对象的所有方法外，还增加了以下方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span>  <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  在列表的首部添加元素\n<span class=\"token keyword\">void</span>  <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  在列表的末尾添加元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       返回列表中的第一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        返回列表中的最后一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    删除并返回列表中的第一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     删除并返回列表中的最后一个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>Set接口</strong>  </p>\n<p>Set接口存储一组唯一，无序的对象，不能保存重复对象</p>\n<p>​    HashSet是Set接口常用的实现类    </p>\n<p>Set中存放对象的引用  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JAVA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/3.png\" alt=\"3\"></p>\n<p>采用对象的equals()方法比较两个对象是否相等</p>\n<p>  <strong>迭代器Iterator</strong>  </p>\n<p>​    如何遍历Set集合呢？    </p>\n<p>  方法    1    ：通过迭代器    Iterator    实现遍历  </p>\n<p>获取Iterator ：Collection 接口的iterator()方法</p>\n<p><strong>Iterator的方法</strong></p>\n<p>boolean hasNext(): 判断是否存在另一个可访问的元素 </p>\n<p>Object next(): 返回要访问的下一个元素</p>\n<p>  方法    2    ：增强型    for    循环  </p>\n<p>  <strong>Map接口</strong>  </p>\n<p>存储一组成对的键-值对象，提供key到value的影视</p>\n<p>key-value不能重复</p>\n<p>key不要求有序，但不允许重复</p>\n<p>value不要求有序，但允许重复</p>\n<p>  <strong>Map接口常用方法</strong>  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Object</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span>      以“键<span class=\"token operator\">-</span>值”对的方式进行存储\n<span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>          根据键返回相关联的值，如果不存在指定的键，返回<span class=\"token keyword\">null</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>       删除由指定的键映射的“键<span class=\"token operator\">-</span>值对”\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      返回元素个数\n<span class=\"token class-name\">Set</span> <span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   返回键的集合\n<span class=\"token class-name\">Collection</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            返回值的集合\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>    如果存在由指定的键映射的“键<span class=\"token operator\">-</span>值对”，返回<span class=\"token boolean\">true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>遍历Map集合</strong>  </p>\n<p>  方法1：通过迭代器Iterator实现遍历  </p>\n<p>  方法    2 ：增强型    for    循环  </p>\n<p>  方法    3    ：键值对  </p>\n<p>  <strong>Collections算法类</strong>  </p>\n<p>  Java    集合框架将针对不同数据结构算法的实现都保存在工具类中  </p>\n<p>  Collections    类定义了一系列用于操作集合的静态方法  </p>\n<p>  <strong>Collections类常用方法</strong>  </p>\n<p>  Collections和Collection不同，前者是集合的操作类，后者是集合接口  </p>\n<p>  Collections    提供的常用静态方法  </p>\n<p>sort():排序</p>\n<p>binarySearch()：查找</p>\n<p>max()\\min():查找最大\\最小值</p>\n<p>fill():将List集合中的所有元素替换为相同的元素</p>\n<p>  Collections排序  </p>\n<p>  Collections    类可以对集合进行排序、查找和替换操作  </p>\n<p>  实现一个类的对象之间比较大小，该类要实现    Comparable    接口  </p>\n<p>重写compareTo()方法</p>\n<p>  <strong>泛型集合</strong>  </p>\n<p>  如何解决以下强制类型转换时容易出现的异常问题  </p>\n<p>List的get(int index)方法获取元素</p>\n<p>Map的get(Object key)方法获取元素</p>\n<p>Iterator的next()方法获取元素</p>\n<p>  通过泛型  </p>\n<p>JDK5.0使用泛型改写了集合框架中的所有接口和类</p>\n<p>  <strong>泛型</strong>  </p>\n<p>  将对象的类型作为参数，指定到其他类或者方法上，从而保证类型转换的安全性和稳定性  </p>\n<p>本质是参数化类型</p>\n<p>  阅读如下代码，思考运行  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//创建学员集合</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建学员类对象</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建诗类对象</span>\n<span class=\"token class-name\">Poem</span> poem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Poem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//将两个对象添加到list集合中</span>\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  由于创建时已指定<span class=\"token class-name\">Student</span>类型，所以这里会报错\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  泛型集合可以约束集合内的元素类型  </p>\n<p>  典型泛型集合    ArrayList    <E>    、    HashMap    &lt;K,V&gt;  </E></p>\n<p><E>、&lt;K,V&gt;表示该泛型集合中的元素类型</E></p>\n<p>泛型集合中的数据不再转换为Object</p>\n<p>  Java    引入泛型的好处是安全简单，且所有强制转换都是自动和隐式进行的  </p>\n<p>  <strong>深入泛型    ——    泛型类</strong>  </p>\n<p>  将泛型的本质是参数化    类型，参数化类型的重要性在于允许创建一些类、接口和方法，其所操作的数据类型被定义为参数，可以在真正使用时指定具体的类型。  </p>\n<p>  <strong>两个概念：</strong>  </p>\n<p>参数化类型：参数化类型包含一个类或接口，以及实际的类型参数列表</p>\n<p>类型变量：是一种非限定性标识符，用来指定类、接口或者方法的类型</p>\n","more":"<p>  <strong>集合框架和泛型</strong>  </p>\n<p>如果并不知道程序运行时会需要多少对象，或者需要更复杂方式存储对象——可以使用Java集合框架</p>\n<p>Java集合框架提供了一套性能优良、使用方便的接口和类，它们位于java.util包中</p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/1.png\" alt=\"1\"></p>\n<p>Collection 接口存储一组不唯一，无序的对象</p>\n<p>List 接口存储一组不唯一，有序（插入顺序）的对象</p>\n<p>Set 接口存储一组唯一，无序的对象 </p>\n<p>Map接口存储一组键值对象，提供key到 value    的映射  </p>\n<p>ArrayList实现了长度可变的数组，在内存中分配连续的空间，遍历元素和随机访问元素的效率比较高</p>\n<p>LinkedList采用链表存储方式，插入、删除元素时效率比较高  </p>\n<p>  <strong>ArrayList特点</strong>  </p>\n<p>ArrayList类是List接口的一个具体实现类</p>\n<p>ArrayList对象实现了可变大小的数组</p>\n<p>随机访问和遍历元素时，它提供更好的性能</p>\n<p>ArrayList集合中可以添加任何类型的数据，并且添加的数据都将转换成Object类型。</p>\n<p>  <strong>ArrayList常用方法</strong>  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   在列表的末尾顺序添加元素，起始索引位置从<span class=\"token number\">0</span>开始\n<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>   在指定的索引位置添加元素。索引位置必须介于<span class=\"token number\">0</span>和列表中元素个数之间\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  返回列表中的元素个数\n<span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span>  返回指定索引位置处的元素。取出的元素是<span class=\"token class-name\">Object</span>类型，使用前需要进行强制类型转换\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  判断列表中是否存在指定元素\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  从列表中删除元素\n<span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> 从列表中删除指定位置元素，起始索引位置从<span class=\"token number\">0</span>开始\n\n<span class=\"token class-name\">Collection</span>接口常用通用方法还有：<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>、<span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>LinkedList常用方法</strong>  </p>\n<p>除了具有ArrayList对象的所有方法外，还增加了以下方法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">void</span>  <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  在列表的首部添加元素\n<span class=\"token keyword\">void</span>  <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span>  在列表的末尾添加元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       返回列表中的第一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        返回列表中的最后一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    删除并返回列表中的第一个元素\n<span class=\"token class-name\">Object</span>  <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     删除并返回列表中的最后一个元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>Set接口</strong>  </p>\n<p>Set接口存储一组唯一，无序的对象，不能保存重复对象</p>\n<p>​    HashSet是Set接口常用的实现类    </p>\n<p>Set中存放对象的引用  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Set</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> s3<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JAVA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nset<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)/3.png\" alt=\"3\"></p>\n<p>采用对象的equals()方法比较两个对象是否相等</p>\n<p>  <strong>迭代器Iterator</strong>  </p>\n<p>​    如何遍历Set集合呢？    </p>\n<p>  方法    1    ：通过迭代器    Iterator    实现遍历  </p>\n<p>获取Iterator ：Collection 接口的iterator()方法</p>\n<p><strong>Iterator的方法</strong></p>\n<p>boolean hasNext(): 判断是否存在另一个可访问的元素 </p>\n<p>Object next(): 返回要访问的下一个元素</p>\n<p>  方法    2    ：增强型    for    循环  </p>\n<p>  <strong>Map接口</strong>  </p>\n<p>存储一组成对的键-值对象，提供key到value的影视</p>\n<p>key-value不能重复</p>\n<p>key不要求有序，但不允许重复</p>\n<p>value不要求有序，但允许重复</p>\n<p>  <strong>Map接口常用方法</strong>  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Object</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span>      以“键<span class=\"token operator\">-</span>值”对的方式进行存储\n<span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>          根据键返回相关联的值，如果不存在指定的键，返回<span class=\"token keyword\">null</span>\n<span class=\"token class-name\">Object</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>       删除由指定的键映射的“键<span class=\"token operator\">-</span>值对”\n<span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                      返回元素个数\n<span class=\"token class-name\">Set</span> <span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   返回键的集合\n<span class=\"token class-name\">Collection</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>            返回值的集合\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span>    如果存在由指定的键映射的“键<span class=\"token operator\">-</span>值对”，返回<span class=\"token boolean\">true</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  <strong>遍历Map集合</strong>  </p>\n<p>  方法1：通过迭代器Iterator实现遍历  </p>\n<p>  方法    2 ：增强型    for    循环  </p>\n<p>  方法    3    ：键值对  </p>\n<p>  <strong>Collections算法类</strong>  </p>\n<p>  Java    集合框架将针对不同数据结构算法的实现都保存在工具类中  </p>\n<p>  Collections    类定义了一系列用于操作集合的静态方法  </p>\n<p>  <strong>Collections类常用方法</strong>  </p>\n<p>  Collections和Collection不同，前者是集合的操作类，后者是集合接口  </p>\n<p>  Collections    提供的常用静态方法  </p>\n<p>sort():排序</p>\n<p>binarySearch()：查找</p>\n<p>max()\\min():查找最大\\最小值</p>\n<p>fill():将List集合中的所有元素替换为相同的元素</p>\n<p>  Collections排序  </p>\n<p>  Collections    类可以对集合进行排序、查找和替换操作  </p>\n<p>  实现一个类的对象之间比较大小，该类要实现    Comparable    接口  </p>\n<p>重写compareTo()方法</p>\n<p>  <strong>泛型集合</strong>  </p>\n<p>  如何解决以下强制类型转换时容易出现的异常问题  </p>\n<p>List的get(int index)方法获取元素</p>\n<p>Map的get(Object key)方法获取元素</p>\n<p>Iterator的next()方法获取元素</p>\n<p>  通过泛型  </p>\n<p>JDK5.0使用泛型改写了集合框架中的所有接口和类</p>\n<p>  <strong>泛型</strong>  </p>\n<p>  将对象的类型作为参数，指定到其他类或者方法上，从而保证类型转换的安全性和稳定性  </p>\n<p>本质是参数化类型</p>\n<p>  阅读如下代码，思考运行  </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//创建学员集合</span>\n<span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> students <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建学员类对象</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//创建诗类对象</span>\n<span class=\"token class-name\">Poem</span> poem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Poem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//将两个对象添加到list集合中</span>\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  由于创建时已指定<span class=\"token class-name\">Student</span>类型，所以这里会报错\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>poem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>  泛型集合可以约束集合内的元素类型  </p>\n<p>  典型泛型集合    ArrayList    <E>    、    HashMap    &lt;K,V&gt;  </E></p>\n<p><E>、&lt;K,V&gt;表示该泛型集合中的元素类型</E></p>\n<p>泛型集合中的数据不再转换为Object</p>\n<p>  Java    引入泛型的好处是安全简单，且所有强制转换都是自动和隐式进行的  </p>\n<p>  <strong>深入泛型    ——    泛型类</strong>  </p>\n<p>  将泛型的本质是参数化    类型，参数化类型的重要性在于允许创建一些类、接口和方法，其所操作的数据类型被定义为参数，可以在真正使用时指定具体的类型。  </p>\n<p>  <strong>两个概念：</strong>  </p>\n<p>参数化类型：参数化类型包含一个类或接口，以及实际的类型参数列表</p>\n<p>类型变量：是一种非限定性标识符，用来指定类、接口或者方法的类型</p>\n","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"java","path":"api/tags/java.json"}]}