{"title":"java进阶-学习笔记(二)","slug":"java进阶-学习笔记(二)","date":"2022-06-01T03:25:00.000Z","updated":"2022-06-01T03:30:07.037Z","comments":true,"path":"api/articles/java进阶-学习笔记(二).json","excerpt":null,"covers":["/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6.png","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7.png","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/8.png","/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/9.png"],"content":"<p>  <strong>输入输出处理</strong>  </p>\n<p>   什么是文件？  </p>\n<p> 相关记录或放在一起的数据的集合</p>\n<p>   Java    程序如何访问文件属性？  </p>\n<p> <strong>JAVA API ：java.io.File 类</strong></p>\n<p>File file &#x3D; new File( String pathname );</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            判断文件或目录是否存在\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            判断是否是文件\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>       判断是否是目录\n<span class=\"token class-name\">String</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            返回此对象表示的文件的相对路径名\n<span class=\"token class-name\">String</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>    返回此对象表示的文件的绝对路径名\n<span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            返回此对象表示的文件或目录的名称\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            删除此对象指定的文件或目录\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>     创建名称的空文件，不创建文件夹\n<span class=\"token keyword\">long</span>  <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>               返回文件的长度，单位为字节<span class=\"token punctuation\">,</span> 如果文件不存在，则返回 <span class=\"token number\">0L</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>   如何读写文件？  </p>\n<p>   通过流来读写文件  </p>\n<p> 流是一组有序的数据序列</p>\n<p> 以先进先出方式发送信息的通道</p>\n<p>   <strong>Java    流的分类</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C\" alt=\"图片 4\">&#x2F;图片 4.png)</p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C\" alt=\"图片 5\">&#x2F;图片 5.png)</p>\n<p>  输入输出流是相对于计算机内存来说的  </p>\n<p>  字节流是     8     位通用字节流，字符流是     16     位     Unicode     字符流  </p>\n<p>  <strong>FileInputStream</strong>  </p>\n<p>   <strong>InputStream</strong>    类常用方法  </p>\n<p>int read( )</p>\n<p>int read(byte[] b)</p>\n<p>int read(byte[] b,int off,int len)</p>\n<p>void close( )</p>\n<p>int available()：可以从输入流中读取的字节数目</p>\n<p>   <strong>子类    FileInputStream</strong>    常用的构造方法  </p>\n<p>  FileInputStream(File file)</p>\n<p>FileInputStream(String name) </p>\n<p>  <strong>使用FileInputStream 读文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6.png\" alt=\"6\"></p>\n<p>   <strong>OutputStream</strong>    类常用方法  </p>\n<p>void write(int c)</p>\n<p>void write(byte[] buf)</p>\n<p>void write(byte[] b,int off,int len)</p>\n<p>void close()</p>\n<p>void flush()：强制把缓冲区的数据写到输出流中</p>\n<p>   <strong>子类    FileOutputStream</strong>    常用的构造方法  </p>\n<p>FileOutputStream (File file)</p>\n<p>FileOutputStream(String name) </p>\n<p>FileOutputStream(String name,boolean append)</p>\n<p>  1    .    前    两种构造方法在向文件写数据时将覆盖文件中原有的内容  </p>\n<p>  2    .    创建    FileOutputStream    实例时，如果相应的文件并不存在，则会自动创建一个空的文件  </p>\n<p>  <strong>使用FileOutputStream 写文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7.png\" alt=\"7\"></p>\n<p>  <strong>Reader类</strong>  </p>\n<p>   Reader    类常用方法  </p>\n<p>int read( )</p>\n<p>int read(char[] c)</p>\n<p>read(char[] c,int off,int len)</p>\n<p>void close( )</p>\n<p>   <strong>子类</strong>    <strong>InputStream    Reader</strong>    常用的构造方法  </p>\n<p>InputStreamReader(InputStream in)</p>\n<p>InputStreamReader(InputStream in,String charsetName)</p>\n<p>  <strong>FileReader类</strong>  </p>\n<p>   FileReader    类是    InputStream    Reader    的子类  </p>\n<p>FileReader(File file)</p>\n<p>FileReader(String name)</p>\n<p>   该类只能按照本地平台的字符编码来读取数据，用户不能指定其他的字符编码类型  </p>\n<p>System.out.println(System.getProperty(“file.encoding”)); 获得本地平台的字符编码类型</p>\n<p>  <strong>使用FileReader读取文件</strong>  </p>\n<p>   与字节流    FileInputStream    类实现文本文件读取步骤类似  </p>\n<p>   如何提高字符流读取文本文件的效率？  </p>\n<p> <strong>使用FileReader类与BufferedReader类</strong></p>\n<p>  BufferedReader    类是    Reader    类的子类  </p>\n<p>  BufferedReader    类带有缓冲区  </p>\n<p>  按行读取内容的    readLine()    方法  </p>\n<p>   BufferedReader    常用的构造方法  </p>\n<p>BufferedReader(Reader in)</p>\n<p>   子类    BufferedReader    特有的方法  </p>\n<p>  readLine()</p>\n<p>  <strong>使用 BufferedReader读文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/8.png\" alt=\"8\"></p>\n<p>  <strong>Writer类</strong>  </p>\n<p>   Writer    类常用方法  </p>\n<p>write(String str)</p>\n<p>write(String str,int off,int len)</p>\n<p>void close()</p>\n<p>void flush()</p>\n<p>   <strong>子类    OutputStream    Writer</strong>    常用的构造方法  </p>\n<p>OutputStreamWriter(OutputStream out)</p>\n<p>OutputStreamWriter(OutputStream out,String charsetName)</p>\n<p>  <strong>FileWriter类</strong>  </p>\n<p>   FileWriter    类是    OutputStream    Writer    的子类  </p>\n<p>FileWriter (File file)</p>\n<p>FileWriter (String name)</p>\n<p>   该类只能按照本地平台的字符编码来写数据，用户不能指定其他的字符编码类型  </p>\n<p>  <strong>使用FileWriter写文件</strong>  </p>\n<p>   与字节流    FileOutputStream    类实现向文本文件写入数据步骤类似  </p>\n<p>   如何提高字符流写文本文件的效率？  </p>\n<p> 使用FileWriter类与BufferedWriter类</p>\n<p>  BufferedWriter    类是    Writer    类的子类  </p>\n<p>  BufferedWriter    类带有缓冲区  </p>\n<p>   BufferedWriter    常用的构造方法  </p>\n<p>  BufferedWriter(Writer out)</p>\n<p>  <strong>使用 BufferedWriter写文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/9.png\" alt=\"9\"></p>\n<p>  <strong>读写二进制文件</strong>  </p>\n<p>   DataInputStream    类  </p>\n<p>FileInputStream的子类</p>\n<p> 与FileInputStream类结合使用读取二进制文件</p>\n<p>   DataOutputStream    类  </p>\n<p>FileOutputStream的子类</p>\n<p> 与FileOutputStream类结合使用写二进制文件</p>\n<p>  <strong>使用 DataInputStream 读写二进制文件</strong>  </p>\n<p>  与字节流    FileInputStream    类实现文本文件读取步骤极其相似  </p>\n<p>  与字节流    FileOutputStream    类实现文本文件读取步骤极其相似  </p>\n","more":"<p>  <strong>输入输出处理</strong>  </p>\n<p>   什么是文件？  </p>\n<p> 相关记录或放在一起的数据的集合</p>\n<p>   Java    程序如何访问文件属性？  </p>\n<p> <strong>JAVA API ：java.io.File 类</strong></p>\n<p>File file &#x3D; new File( String pathname );</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">boolean</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            判断文件或目录是否存在\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            判断是否是文件\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>       判断是否是目录\n<span class=\"token class-name\">String</span> <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            返回此对象表示的文件的相对路径名\n<span class=\"token class-name\">String</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>    返回此对象表示的文件的绝对路径名\n<span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            返回此对象表示的文件或目录的名称\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>            删除此对象指定的文件或目录\n<span class=\"token keyword\">boolean</span> <span class=\"token function\">createNewFile</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>     创建名称的空文件，不创建文件夹\n<span class=\"token keyword\">long</span>  <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>               返回文件的长度，单位为字节<span class=\"token punctuation\">,</span> 如果文件不存在，则返回 <span class=\"token number\">0L</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>   如何读写文件？  </p>\n<p>   通过流来读写文件  </p>\n<p> 流是一组有序的数据序列</p>\n<p> 以先进先出方式发送信息的通道</p>\n<p>   <strong>Java    流的分类</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C\" alt=\"图片 4\">&#x2F;图片 4.png)</p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C\" alt=\"图片 5\">&#x2F;图片 5.png)</p>\n<p>  输入输出流是相对于计算机内存来说的  </p>\n<p>  字节流是     8     位通用字节流，字符流是     16     位     Unicode     字符流  </p>\n<p>  <strong>FileInputStream</strong>  </p>\n<p>   <strong>InputStream</strong>    类常用方法  </p>\n<p>int read( )</p>\n<p>int read(byte[] b)</p>\n<p>int read(byte[] b,int off,int len)</p>\n<p>void close( )</p>\n<p>int available()：可以从输入流中读取的字节数目</p>\n<p>   <strong>子类    FileInputStream</strong>    常用的构造方法  </p>\n<p>  FileInputStream(File file)</p>\n<p>FileInputStream(String name) </p>\n<p>  <strong>使用FileInputStream 读文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/6.png\" alt=\"6\"></p>\n<p>   <strong>OutputStream</strong>    类常用方法  </p>\n<p>void write(int c)</p>\n<p>void write(byte[] buf)</p>\n<p>void write(byte[] b,int off,int len)</p>\n<p>void close()</p>\n<p>void flush()：强制把缓冲区的数据写到输出流中</p>\n<p>   <strong>子类    FileOutputStream</strong>    常用的构造方法  </p>\n<p>FileOutputStream (File file)</p>\n<p>FileOutputStream(String name) </p>\n<p>FileOutputStream(String name,boolean append)</p>\n<p>  1    .    前    两种构造方法在向文件写数据时将覆盖文件中原有的内容  </p>\n<p>  2    .    创建    FileOutputStream    实例时，如果相应的文件并不存在，则会自动创建一个空的文件  </p>\n<p>  <strong>使用FileOutputStream 写文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/7.png\" alt=\"7\"></p>\n<p>  <strong>Reader类</strong>  </p>\n<p>   Reader    类常用方法  </p>\n<p>int read( )</p>\n<p>int read(char[] c)</p>\n<p>read(char[] c,int off,int len)</p>\n<p>void close( )</p>\n<p>   <strong>子类</strong>    <strong>InputStream    Reader</strong>    常用的构造方法  </p>\n<p>InputStreamReader(InputStream in)</p>\n<p>InputStreamReader(InputStream in,String charsetName)</p>\n<p>  <strong>FileReader类</strong>  </p>\n<p>   FileReader    类是    InputStream    Reader    的子类  </p>\n<p>FileReader(File file)</p>\n<p>FileReader(String name)</p>\n<p>   该类只能按照本地平台的字符编码来读取数据，用户不能指定其他的字符编码类型  </p>\n<p>System.out.println(System.getProperty(“file.encoding”)); 获得本地平台的字符编码类型</p>\n<p>  <strong>使用FileReader读取文件</strong>  </p>\n<p>   与字节流    FileInputStream    类实现文本文件读取步骤类似  </p>\n<p>   如何提高字符流读取文本文件的效率？  </p>\n<p> <strong>使用FileReader类与BufferedReader类</strong></p>\n<p>  BufferedReader    类是    Reader    类的子类  </p>\n<p>  BufferedReader    类带有缓冲区  </p>\n<p>  按行读取内容的    readLine()    方法  </p>\n<p>   BufferedReader    常用的构造方法  </p>\n<p>BufferedReader(Reader in)</p>\n<p>   子类    BufferedReader    特有的方法  </p>\n<p>  readLine()</p>\n<p>  <strong>使用 BufferedReader读文本文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/8.png\" alt=\"8\"></p>\n<p>  <strong>Writer类</strong>  </p>\n<p>   Writer    类常用方法  </p>\n<p>write(String str)</p>\n<p>write(String str,int off,int len)</p>\n<p>void close()</p>\n<p>void flush()</p>\n<p>   <strong>子类    OutputStream    Writer</strong>    常用的构造方法  </p>\n<p>OutputStreamWriter(OutputStream out)</p>\n<p>OutputStreamWriter(OutputStream out,String charsetName)</p>\n<p>  <strong>FileWriter类</strong>  </p>\n<p>   FileWriter    类是    OutputStream    Writer    的子类  </p>\n<p>FileWriter (File file)</p>\n<p>FileWriter (String name)</p>\n<p>   该类只能按照本地平台的字符编码来写数据，用户不能指定其他的字符编码类型  </p>\n<p>  <strong>使用FileWriter写文件</strong>  </p>\n<p>   与字节流    FileOutputStream    类实现向文本文件写入数据步骤类似  </p>\n<p>   如何提高字符流写文本文件的效率？  </p>\n<p> 使用FileWriter类与BufferedWriter类</p>\n<p>  BufferedWriter    类是    Writer    类的子类  </p>\n<p>  BufferedWriter    类带有缓冲区  </p>\n<p>   BufferedWriter    常用的构造方法  </p>\n<p>  BufferedWriter(Writer out)</p>\n<p>  <strong>使用 BufferedWriter写文件</strong>  </p>\n<p><img src=\"/../images/java%E8%BF%9B%E9%98%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)/9.png\" alt=\"9\"></p>\n<p>  <strong>读写二进制文件</strong>  </p>\n<p>   DataInputStream    类  </p>\n<p>FileInputStream的子类</p>\n<p> 与FileInputStream类结合使用读取二进制文件</p>\n<p>   DataOutputStream    类  </p>\n<p>FileOutputStream的子类</p>\n<p> 与FileOutputStream类结合使用写二进制文件</p>\n<p>  <strong>使用 DataInputStream 读写二进制文件</strong>  </p>\n<p>  与字节流    FileInputStream    类实现文本文件读取步骤极其相似  </p>\n<p>  与字节流    FileOutputStream    类实现文本文件读取步骤极其相似  </p>\n","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"java","path":"api/tags/java.json"}]}