{"title":"","slug":"输入输出处理","date":"2022-06-01T02:43:03.125Z","updated":"2022-06-01T01:27:33.000Z","comments":true,"path":"api/articles/输入输出处理.json","excerpt":null,"covers":null,"content":"<p><strong>输入输出处理</strong></p>\n<p>u<strong>什么是文件？</strong></p>\n<p>n相关记录或放在一起的数据的集合</p>\n<p>u<strong>Java****程序如何访问文件属性？</strong></p>\n<p>nJAVA API ：java.io.File 类</p>\n<p>File file &#x3D; new File( String pathname );</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">boolean exists( )\n判断文件或目录是否存在\nboolean isFile( )\n判断是否是文件\nboolean isDirectory( )\n判断是否是目录\nString getPath( )\n返回此对象表示的文件的相对路径名\nString getAbsolutePath( )\n返回此对象表示的文件的绝对路径名\nString getName( )\n返回此对象表示的文件或目录的名称\nboolean delete( )\n删除此对象指定的文件或目录\nboolean createNewFile( )\n创建名称的空文件，不创建文件夹\nlong  length()\n返回文件的长度，单位为字节, 如果文件不存在，则返回 0L\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>u<strong>如何读写文件？</strong></p>\n<p>u</p>\n<p>u<strong>通过流来读写文件</strong></p>\n<p>n流是一组有序的数据序列</p>\n<p>n以先进先出方式发送信息的通道</p>\n<p>u<strong>Java****流的分类</strong></p>\n<p>pic4 5</p>\n<p><strong>输入输出流是相对于计算机内存来说的</strong></p>\n<p><strong>字节流是</strong> <strong>8</strong> <strong>位通用字节流，字符流是</strong> <strong>16</strong> <strong>位</strong> <strong>Unicode</strong> <strong>字符流</strong></p>\n<p><strong>FileInputStream</strong></p>\n<p>u<strong>InputStream****类常用方法</strong></p>\n<p>nint read( )</p>\n<p>nint read(byte[] b)</p>\n<p>nint read(byte[] b,int off,int len)</p>\n<p>nvoid close( )</p>\n<p>nint available()：可以从输入流中读取的字节数目</p>\n<p>u<strong>子类<strong><strong>FileInputStream</strong></strong>常用的构造方法</strong></p>\n<p>n FileInputStream(File file)</p>\n<p>nFileInputStream(String name) </p>\n<p><strong>使用FileInputStream 读文本文件</strong></p>\n<p>pic6</p>\n<p>u<strong>OutputStream****类常用方法</strong></p>\n<p>nvoid write(int c)</p>\n<p>nvoid write(byte[] buf)</p>\n<p>nvoid write(byte[] b,int off,int len)</p>\n<p>nvoid close()</p>\n<p>nvoid flush()：强制把缓冲区的数据写到输出流中</p>\n<p>u<strong>子类<strong><strong>FileOutputStream</strong></strong>常用的构造方法</strong></p>\n<p>nFileOutputStream (File file)</p>\n<p>nFileOutputStream(String name) </p>\n<p>nFileOutputStream(String name,boolean append)</p>\n<p><strong>1</strong>**.<strong><strong>前</strong></strong>两种构造方法在向文件写数据时将覆盖文件中原有的内容**</p>\n<p><strong>2</strong>**.<strong><strong>创建</strong></strong>FileOutputStream**<strong>实例时，如果相应的文件并不存在，则会自动创建一个空的文件</strong></p>\n<p><strong>使用FileOutputStream 写文本文件</strong></p>\n<p>Pic7</p>\n<p><strong>Reader类</strong></p>\n<p>u<strong>Reader****类常用方法</strong></p>\n<p>nint read( )</p>\n<p>nint read(char[] c)</p>\n<p>nread(char[] c,int off,int len)</p>\n<p>nvoid close( )</p>\n<p>u<strong>子类<strong><strong>InputStream</strong></strong>Reader****常用的构造方法</strong></p>\n<p>nInputStreamReader(InputStream in)</p>\n<p>nInputStreamReader(InputStream in,String charsetName)</p>\n<p><strong>FileReader类</strong></p>\n<p>u<strong>FileReader<strong><strong>类是</strong></strong>InputStream<strong><strong>Reader</strong></strong>的子类</strong></p>\n<p>nFileReader(File file)</p>\n<p>nFileReader(String name)</p>\n<p>u<strong>该类只能按照本地平台的字符编码来读取数据，用户不能指定其他的字符编码类型</strong></p>\n<p>nSystem.out.println(System.getProperty(“file.encoding”)); 获得本地平台的字符编码类型</p>\n<p><strong>使用FileReader读取文件</strong></p>\n<p>u<strong>与字节流<strong><strong>FileInputStream</strong></strong>类实现文本文件读取步骤类似</strong></p>\n<p>u<strong>如何提高字符流读取文本文件的效率？</strong></p>\n<p>n使用FileReader类与BufferedReader类</p>\n<p><strong>BufferedReader<strong><strong>类是</strong></strong>Reader****类的子类</strong></p>\n<p><strong>BufferedReader****类带有缓冲区</strong></p>\n<p>*<em>按行读取内容的</em>***readLine()**<strong>方法</strong></p>\n<p>u<strong>BufferedReader****常用的构造方法</strong></p>\n<p>nBufferedReader(Reader in)</p>\n<p>u<strong>子类<strong><strong>BufferedReader</strong></strong>特有的方法</strong></p>\n<p>n readLine()</p>\n<p><strong>使用 BufferedReader读文本文件</strong></p>\n<p>pic8</p>\n<p><strong>Writer类</strong></p>\n<p>u<strong>Writer****类常用方法</strong></p>\n<p>nwrite(String str)</p>\n<p>nwrite(String str,int off,int len)</p>\n<p>nvoid close()</p>\n<p>nvoid flush()</p>\n<p>u<strong>子类<strong><strong>OutputStream</strong></strong>Writer****常用的构造方法</strong></p>\n<p>nOutputStreamWriter(OutputStream out)</p>\n<p>nOutputStreamWriter(OutputStream out,String charsetName)</p>\n<p><strong>FileWriter类</strong></p>\n<p>u<strong>FileWriter<strong><strong>类是</strong></strong>OutputStream<strong><strong>Writer</strong></strong>的子类</strong></p>\n<p>nFileWriter (File file)</p>\n<p>nFileWriter (String name)</p>\n<p>u<strong>该类只能按照本地平台的字符编码来写数据，用户不能指定其他的字符编码类型</strong></p>\n<p><strong>使用FileWriter写文件</strong></p>\n<p>u<strong>与字节流<strong><strong>FileOutputStream</strong></strong>类实现向文本文件写入数据步骤类似</strong></p>\n<p>u<strong>如何提高字符流写文本文件的效率？</strong></p>\n<p>n使用FileWriter类与BufferedWriter类</p>\n<p><strong>BufferedWriter<strong><strong>类是</strong></strong>Writer****类的子类</strong></p>\n<p><strong>BufferedWriter****类带有缓冲区</strong></p>\n<p>u<strong>BufferedWriter****常用的构造方法</strong></p>\n<p>n BufferedWriter(Writer out)</p>\n<p><strong>使用 BufferedWriter写文件</strong></p>\n<p>Pic9</p>\n<p><strong>读写二进制文件</strong></p>\n<p>u<strong>DataInputStream****类</strong></p>\n<p>nFileInputStream的子类</p>\n<p>n与FileInputStream类结合使用读取二进制文件</p>\n<p>u<strong>DataOutputStream****类</strong></p>\n<p>nFileOutputStream的子类</p>\n<p>n与FileOutputStream类结合使用写二进制文件</p>\n<p><strong>使用 DataInputStream 读写二进制文件</strong></p>\n<p><strong>与字节流<strong><strong>FileInputStream</strong></strong>类实现文本文件读取步骤极其相似</strong></p>\n<p><strong>与字节流<strong><strong>FileOutputStream</strong></strong>类实现文本文件读取步骤极其相似</strong></p>\n","more":"<p><strong>输入输出处理</strong></p>\n<p>u<strong>什么是文件？</strong></p>\n<p>n相关记录或放在一起的数据的集合</p>\n<p>u<strong>Java****程序如何访问文件属性？</strong></p>\n<p>nJAVA API ：java.io.File 类</p>\n<p>File file &#x3D; new File( String pathname );</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">boolean exists( )\n判断文件或目录是否存在\nboolean isFile( )\n判断是否是文件\nboolean isDirectory( )\n判断是否是目录\nString getPath( )\n返回此对象表示的文件的相对路径名\nString getAbsolutePath( )\n返回此对象表示的文件的绝对路径名\nString getName( )\n返回此对象表示的文件或目录的名称\nboolean delete( )\n删除此对象指定的文件或目录\nboolean createNewFile( )\n创建名称的空文件，不创建文件夹\nlong  length()\n返回文件的长度，单位为字节, 如果文件不存在，则返回 0L\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>u<strong>如何读写文件？</strong></p>\n<p>u</p>\n<p>u<strong>通过流来读写文件</strong></p>\n<p>n流是一组有序的数据序列</p>\n<p>n以先进先出方式发送信息的通道</p>\n<p>u<strong>Java****流的分类</strong></p>\n<p>pic4 5</p>\n<p><strong>输入输出流是相对于计算机内存来说的</strong></p>\n<p><strong>字节流是</strong> <strong>8</strong> <strong>位通用字节流，字符流是</strong> <strong>16</strong> <strong>位</strong> <strong>Unicode</strong> <strong>字符流</strong></p>\n<p><strong>FileInputStream</strong></p>\n<p>u<strong>InputStream****类常用方法</strong></p>\n<p>nint read( )</p>\n<p>nint read(byte[] b)</p>\n<p>nint read(byte[] b,int off,int len)</p>\n<p>nvoid close( )</p>\n<p>nint available()：可以从输入流中读取的字节数目</p>\n<p>u<strong>子类<strong><strong>FileInputStream</strong></strong>常用的构造方法</strong></p>\n<p>n FileInputStream(File file)</p>\n<p>nFileInputStream(String name) </p>\n<p><strong>使用FileInputStream 读文本文件</strong></p>\n<p>pic6</p>\n<p>u<strong>OutputStream****类常用方法</strong></p>\n<p>nvoid write(int c)</p>\n<p>nvoid write(byte[] buf)</p>\n<p>nvoid write(byte[] b,int off,int len)</p>\n<p>nvoid close()</p>\n<p>nvoid flush()：强制把缓冲区的数据写到输出流中</p>\n<p>u<strong>子类<strong><strong>FileOutputStream</strong></strong>常用的构造方法</strong></p>\n<p>nFileOutputStream (File file)</p>\n<p>nFileOutputStream(String name) </p>\n<p>nFileOutputStream(String name,boolean append)</p>\n<p><strong>1</strong>**.<strong><strong>前</strong></strong>两种构造方法在向文件写数据时将覆盖文件中原有的内容**</p>\n<p><strong>2</strong>**.<strong><strong>创建</strong></strong>FileOutputStream**<strong>实例时，如果相应的文件并不存在，则会自动创建一个空的文件</strong></p>\n<p><strong>使用FileOutputStream 写文本文件</strong></p>\n<p>Pic7</p>\n<p><strong>Reader类</strong></p>\n<p>u<strong>Reader****类常用方法</strong></p>\n<p>nint read( )</p>\n<p>nint read(char[] c)</p>\n<p>nread(char[] c,int off,int len)</p>\n<p>nvoid close( )</p>\n<p>u<strong>子类<strong><strong>InputStream</strong></strong>Reader****常用的构造方法</strong></p>\n<p>nInputStreamReader(InputStream in)</p>\n<p>nInputStreamReader(InputStream in,String charsetName)</p>\n<p><strong>FileReader类</strong></p>\n<p>u<strong>FileReader<strong><strong>类是</strong></strong>InputStream<strong><strong>Reader</strong></strong>的子类</strong></p>\n<p>nFileReader(File file)</p>\n<p>nFileReader(String name)</p>\n<p>u<strong>该类只能按照本地平台的字符编码来读取数据，用户不能指定其他的字符编码类型</strong></p>\n<p>nSystem.out.println(System.getProperty(“file.encoding”)); 获得本地平台的字符编码类型</p>\n<p><strong>使用FileReader读取文件</strong></p>\n<p>u<strong>与字节流<strong><strong>FileInputStream</strong></strong>类实现文本文件读取步骤类似</strong></p>\n<p>u<strong>如何提高字符流读取文本文件的效率？</strong></p>\n<p>n使用FileReader类与BufferedReader类</p>\n<p><strong>BufferedReader<strong><strong>类是</strong></strong>Reader****类的子类</strong></p>\n<p><strong>BufferedReader****类带有缓冲区</strong></p>\n<p>*<em>按行读取内容的</em>***readLine()**<strong>方法</strong></p>\n<p>u<strong>BufferedReader****常用的构造方法</strong></p>\n<p>nBufferedReader(Reader in)</p>\n<p>u<strong>子类<strong><strong>BufferedReader</strong></strong>特有的方法</strong></p>\n<p>n readLine()</p>\n<p><strong>使用 BufferedReader读文本文件</strong></p>\n<p>pic8</p>\n<p><strong>Writer类</strong></p>\n<p>u<strong>Writer****类常用方法</strong></p>\n<p>nwrite(String str)</p>\n<p>nwrite(String str,int off,int len)</p>\n<p>nvoid close()</p>\n<p>nvoid flush()</p>\n<p>u<strong>子类<strong><strong>OutputStream</strong></strong>Writer****常用的构造方法</strong></p>\n<p>nOutputStreamWriter(OutputStream out)</p>\n<p>nOutputStreamWriter(OutputStream out,String charsetName)</p>\n<p><strong>FileWriter类</strong></p>\n<p>u<strong>FileWriter<strong><strong>类是</strong></strong>OutputStream<strong><strong>Writer</strong></strong>的子类</strong></p>\n<p>nFileWriter (File file)</p>\n<p>nFileWriter (String name)</p>\n<p>u<strong>该类只能按照本地平台的字符编码来写数据，用户不能指定其他的字符编码类型</strong></p>\n<p><strong>使用FileWriter写文件</strong></p>\n<p>u<strong>与字节流<strong><strong>FileOutputStream</strong></strong>类实现向文本文件写入数据步骤类似</strong></p>\n<p>u<strong>如何提高字符流写文本文件的效率？</strong></p>\n<p>n使用FileWriter类与BufferedWriter类</p>\n<p><strong>BufferedWriter<strong><strong>类是</strong></strong>Writer****类的子类</strong></p>\n<p><strong>BufferedWriter****类带有缓冲区</strong></p>\n<p>u<strong>BufferedWriter****常用的构造方法</strong></p>\n<p>n BufferedWriter(Writer out)</p>\n<p><strong>使用 BufferedWriter写文件</strong></p>\n<p>Pic9</p>\n<p><strong>读写二进制文件</strong></p>\n<p>u<strong>DataInputStream****类</strong></p>\n<p>nFileInputStream的子类</p>\n<p>n与FileInputStream类结合使用读取二进制文件</p>\n<p>u<strong>DataOutputStream****类</strong></p>\n<p>nFileOutputStream的子类</p>\n<p>n与FileOutputStream类结合使用写二进制文件</p>\n<p><strong>使用 DataInputStream 读写二进制文件</strong></p>\n<p><strong>与字节流<strong><strong>FileInputStream</strong></strong>类实现文本文件读取步骤极其相似</strong></p>\n<p><strong>与字节流<strong><strong>FileOutputStream</strong></strong>类实现文本文件读取步骤极其相似</strong></p>\n","categories":[],"tags":[]}